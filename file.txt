def estimateSpeed(location1, location2, fps):
    d_pixels = math.sqrt(math.pow(location2[0] - location1[0], 2) + math.pow(location2[1] - location1[1], 2))
    # ppm = location2[2] / carWidht
    ppm = 10                          #$$$$
    d_meters = d_pixels / ppm
    #print("d_pixels=" + str(d_pixels), "d_meters=" + str(d_meters))
    #fps = 10#$$$$
    print(fps)
    speed = d_meters * 10 * 3.6 #3600/1000
    return speed

carLocation2[carID] = [t_x, t_y, t_w, t_h]
for i in carLocation1.keys():	
            if frameCounter % 1 == 0: #it will always work
                [x1, y1, w1, h1] = carLocation1[i]
                [x2, y2, w2, h2] = carLocation2[i]
		
		# print 'previous location: ' + str(carLocation1[i]) + ', current location: ' + str(carLocation2[i])
                carLocation1[i] = [x2, y2, w2, h2]
		
		# print 'new previous location: ' + str(carLocation1[i])
                if [x1, y1, w1, h1] != [x2, y2, w2, h2]:
                    if (speed[i] == None or speed[i] == 0): #275.. 285  and y1 >= 250 and y1 <= 260.. this is to give command to the code to only estimate speed when the vehicle is between 275 and 285! 
                        speed[i] = estimateSpeed([x1, y1, w1, h1], [x2, y2, w2, h2], fps)
                        print('1st', x1, y1, w1, h1, ' ', '2nd', x2, y2, w2, h2, ' ', speed[i], ' ', 'fps:', fps)
                        #print('')

			#if y1 > 275 and y1 < 285:
                    if (speed[i] != None and (x2 > x1+5 or x2 < x1-5) and (y2 > y1+5 or y2 < y1-5)): #so that even if the driver opens his seat, the code doesn't detect speed in that
                        cv2.putText(resultImage, str(int(speed[i])) + " km/hr", (int(x1 + w1/2), int(y1-5)),cv2.FONT_HERSHEY_SIMPLEX, 0.75, (255, 0, 0), 2)
                        print(speed[i], 'YOOOOOOOOOOOO')
                        print(datetime.datetime.now())
                        #if (x1 < 300):
                            #fig, (ax1) = plt.subplots(1)
                            #ax1.imshow(resultImage)
                            #plt.show()
                        

                        #mwb.save(filename)
                        
                        #Img = cv2.imread(image)
                        cropped_image[i] = image[y1:y1+h1+25, x1:x1+w1+25]
                        

                        #fig, (ax1) = plt.subplots(1)
                        #ax1.imshow(cropped_image[i])
                        #plt.show()
                        
                        LPN[i] = detection(cropped_image[i])
                        print(LPN[i])
        
                        

                        a = int(a) + int(1)
                        a = int(a)
                        c = datetime.datetime.now()
                        d = c.strftime('%d') + '/' + c.strftime('%b') + '/' + c.strftime('%Y')
                        e = c.strftime('%H') + ':' + c.strftime('%M') + ':' + c.strftime('%S')
                        

                        filename = 'C:\\Users\SHREYA\Desktop\mainFileVehicleID.xlsx'
                        mwb = load_workbook(filename)
                        sheet[counter] = mwb.active
                        max_row_sheet = sheet[counter].max_row
                        max_row_excel = int(max_row_sheet) + 1
                        sheet[counter].cell(row=max_row_excel, column=1).value = int(max_row_sheet)
                        sheet[counter].cell(row=max_row_excel, column=2).value = d
                        sheet[counter].cell(row=max_row_excel, column=3).value = e
                        sheet[counter].cell(row=max_row_excel, column=4).value = 'Cam1'
                        sheet[counter].cell(row=max_row_excel, column=5).value = speed[i]
                        sheet[counter].cell(row=max_row_excel, column=6).value = LPN[i]

                        mwb.save(filename)
